import os
from datetime import datetime, timedelta

from aiogram import Dispatcher, types
from aiogram.dispatcher.filters import Text
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from databases.db import *
from client.utils.timers.timers import *
from client.keyboards.send_hw import *


async def send_welcome(message: types.Message):
    with open(os.path.join('media', 'start.jpg'), 'rb') as photo:
        await message.answer_photo(photo=photo,
                                   caption=f"""
–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name} üëã
–≠—Ç–æ –ò–≥—Ä–æ–≤–∞—è –í–æ—Ä–æ–Ω–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π —É —Ç–µ–±—è –µ—Å—Ç—å 3 –∂–∏–∑–Ω–∏. ‚ù§‚ù§‚ù§
–ñ–∏–∑–Ω—å —Å–≥–æ—Ä–∞–µ—Ç —á–µ—Ä–µ–∑ 8 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Ç–µ–±–µ –±—ã–ª–∞ –≤—ã—Å–ª–∞–Ω–∞ –¥–æ–º–∞—à–∫–∞.
–ï—Å–ª–∏ —Ç—ã —Å–¥–µ–ª–∞–ª –¥–æ–º–∞—à–∫—É —Ä–∞–Ω—å—à–µ, —á–µ–º —Å–≥–æ—Ä–µ–ª–∞ –æ—á–µ—Ä–µ–¥–Ω–∞—è –∂–∏–∑–Ω—å - —Ç–æ–≥–¥–∞ —Å—á—ë—Ç–∏–∫ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è, –Ω–æ –∂–∏–∑–Ω–∏ –Ω–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è.

–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –¥–æ–π—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞, —Ç–µ–±–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å 3 –¥–æ–º–∞—à–∫–∏.
–ö–∞–∂–¥—É—é –¥–æ–º–∞—à–∫—É –æ—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ –≤ –õ–°.
–ï—Å–ª–∏ —Ç—ã –≥–æ—Ç–æ–≤, –º–æ–∂–µ–º –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å.
‚¨áÔ∏è‚¨áÔ∏è‚¨áÔ∏è
""", reply_markup=send_hw1)
    set_user(message.from_user.id, message.from_user.full_name)
    timer = AsyncIOScheduler()
    timer.add_job(check_start, 'date', run_date=datetime.now() +
                  timedelta(seconds=INIT_TIMER), kwargs={'message': message})
    timer.start()


async def get_hw1(callback: types.CallbackQuery):
    hw_status = check_hw1(callback.from_user.id)
    if hw_status == 'disactive':
        activate_hw1(callback.from_user.id)
        await callback.message.answer("""
üåº –í–æ—Ç –≤–∞—à–µ –î–ó1 ‚¨áÔ∏è
–°–∫–æ–ø–∏—Ä—É–π –µ–≥–æ –∏ –¥–æ–ø–∏—à–∏ —Å–ª–æ–≤–æ "–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è".
""")
        await callback.message.answer(f"""
–í–∞—à –ò–î-{get_system_id(callback.from_user.id)}

–ú–æ–π –ø–µ—Ä–≤—ã–π —Å–ª–æ–≥ —Å–∏–¥–∏—Ç –≤ —á–∞–ª–º–µ,
–û–Ω –Ω–∞ –í–æ—Å—Ç–æ–∫–µ –±—ã—Ç—å –æ–±—è–∑–∞–Ω.
–í—Ç–æ—Ä–æ–π –∂–µ —Å–ª–æ–≥ –∏–∑–≤–µ—Å—Ç–µ–Ω –º–Ω–µ,
–û–Ω —Å —Ü–∏—Ñ—Ä–æ—é –∫–∞–∫ –±—É–¥—Ç–æ —Å–≤—è–∑–∞–Ω.

–í —á–∞–ª–º–µ —Å–∏–¥–∏—Ç –∏ —Ç—Ä–µ—Ç–∏–π —Å–ª–æ–≥,
–ñ–∏–≤–µ—Ç –æ–Ω —Ç–æ–∂–µ –Ω–∞ –í–æ—Å—Ç–æ–∫–µ.
–ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Å–ª–æ–≥ –ø–æ–º–æ–∂–µ—Ç –±–æ–≥
–£–∑–Ω–∞—Ç—å, —á—Ç–æ —ç—Ç–æ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–≥.

–û—Ç–≤–µ—Ç:
""", reply_markup=ask_expert)
        await callback.answer()
    elif hw_status == 'active':
        await callback.message.answer('‚òùüèº –î–ó1 —É–∂–µ –±—ã–ª–æ –≤—ã—Å–ª–∞–Ω–æ',
                                      reply_markup=resend_hw1_k)
        await callback.answer()
    elif hw_status == 'done':
        await callback.message.answer('‚úÖ –î–ó1 —É–∂–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ')
        await callback.answer()


async def resend_hw1(callback: types.CallbackQuery):
    await callback.message.answer("""
üåº –í–æ—Ç –≤–∞—à–µ –î–ó1 ‚¨áÔ∏è
–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ –∏ –¥–æ–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ "–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è".
""")
    await callback.message.answer(f"""
–í–∞—à –ò–î-{get_system_id(callback.from_user.id)}

–ú–æ–π –ø–µ—Ä–≤—ã–π —Å–ª–æ–≥ —Å–∏–¥–∏—Ç –≤ —á–∞–ª–º–µ,
–û–Ω –Ω–∞ –í–æ—Å—Ç–æ–∫–µ –±—ã—Ç—å –æ–±—è–∑–∞–Ω.
–í—Ç–æ—Ä–æ–π –∂–µ —Å–ª–æ–≥ –∏–∑–≤–µ—Å—Ç–µ–Ω –º–Ω–µ,
–û–Ω —Å —Ü–∏—Ñ—Ä–æ—é –∫–∞–∫ –±—É–¥—Ç–æ —Å–≤—è–∑–∞–Ω.

–í —á–∞–ª–º–µ —Å–∏–¥–∏—Ç –∏ —Ç—Ä–µ—Ç–∏–π —Å–ª–æ–≥,
–ñ–∏–≤–µ—Ç –æ–Ω —Ç–æ–∂–µ –Ω–∞ –í–æ—Å—Ç–æ–∫–µ.
–ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Å–ª–æ–≥ –ø–æ–º–æ–∂–µ—Ç –±–æ–≥
–£–∑–Ω–∞—Ç—å, —á—Ç–æ —ç—Ç–æ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–≥.

–û—Ç–≤–µ—Ç:
""", reply_markup=ask_expert)
    await callback.answer()


async def get_hw(message: types.Message):
    if get_system_id(message.from_user.id) in message.text:
        await message.answer(f'–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ –≤—ã—Å–ª–∞–ª–∏ {get_hw_number(message.from_user.id)}')


def register_hanlders(dp: Dispatcher):
    dp.register_message_handler(send_welcome, commands=['start'])
    dp.register_callback_query_handler(get_hw1, Text('hw1'))
    dp.register_callback_query_handler(
        resend_hw1, Text('resend_hw1'))
    dp.register_message_handler(get_hw)
